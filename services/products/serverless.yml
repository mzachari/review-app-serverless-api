service: review-app-mvp-api-products

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack

custom:
  stage: ${self:provider.stage}
  awsAccountId:
    stage: "075597226000"
    dev: "075597226000"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region,'ap-south-1'}
  profile: ${opt:profile, 'staginghta'}
  versionFunctions: false
  environment:
    productTable: ${self:provider.stage}-products
    reviewTable: ${self:provider.stage}-reviews
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId.${self:custom.stage}}:table/${self:provider.environment.productTable}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:${self:custom.awsAccountId.${self:custom.stage}}:table/${self:provider.environment.reviewTable}
functions:
  getAllProducts:
    handler: productController.getAllProducts
    memorySize: 256
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProduct:
    handler: productController.getProduct
    memorySize: 256
    events:
      - http:
          path: "products/{productId}"
          method: get
          cors: true

